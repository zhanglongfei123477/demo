{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/**\n * Module dependencies.\n */\nvar assert = require('assert');\n\nvar Parser = require('stream-parser');\n\nvar inherits = require('util').inherits;\n\nvar Transform = require('stream').Transform; // node v0.8.x compat\n\n\nif (!Transform) Transform = require('readable-stream/transform');\n/**\n * Module exports.\n */\n\nmodule.exports = Throttle;\n/**\n * The `Throttle` passthrough stream class is very similar to the node core\n * `stream.Passthrough` stream, except that you specify a `bps` \"bytes per\n * second\" option and data *will not* be passed through faster than the byte\n * value you specify.\n *\n * You can invoke with just a `bps` Number and get the rest of the default\n * options. This should be more common:\n *\n * ``` js\n * process.stdin.pipe(new Throttle(100 * 1024)).pipe(process.stdout);\n * ```\n *\n * Or you can pass an `options` Object in, with a `bps` value specified along with\n * other options:\n *\n * ``` js\n * var t = new Throttle({ bps: 100 * 1024, chunkSize: 100, highWaterMark: 500 });\n * ```\n *\n * @param {Number|Object} opts an options object or the \"bps\" Number value\n * @api public\n */\n\nfunction Throttle(opts) {\n  if (!(this instanceof Throttle)) return new Throttle(opts);\n  if ('number' == typeof opts) opts = {\n    bps: opts\n  };\n  if (!opts) opts = {};\n  if (null == opts.lowWaterMark) opts.lowWaterMark = 0;\n  if (null == opts.highWaterMark) opts.highWaterMark = 0;\n  if (null == opts.bps) throw new Error('must pass a \"bps\" bytes-per-second option');\n  if (null == opts.chunkSize) opts.chunkSize = opts.bps / 10 | 0; // 1/10th of \"bps\" by default\n\n  Transform.call(this, opts);\n  this.bps = opts.bps;\n  this.chunkSize = Math.max(1, opts.chunkSize);\n  this.totalBytes = 0;\n  this.startTime = Date.now();\n\n  this._passthroughChunk();\n}\n\ninherits(Throttle, Transform);\n/**\n * Mixin `Parser`.\n */\n\nParser(Throttle.prototype);\n/**\n * Begins passing through the next \"chunk\" of bytes.\n *\n * @api private\n */\n\nThrottle.prototype._passthroughChunk = function () {\n  this._passthrough(this.chunkSize, this._onchunk);\n\n  this.totalBytes += this.chunkSize;\n};\n/**\n * Called once a \"chunk\" of bytes has been passed through. Waits if necessary\n * before passing through the next chunk of bytes.\n *\n * @api private\n */\n\n\nThrottle.prototype._onchunk = function (output, done) {\n  var self = this;\n  var totalSeconds = (Date.now() - this.startTime) / 1000;\n  var expected = totalSeconds * this.bps;\n\n  function d() {\n    self._passthroughChunk();\n\n    done();\n  }\n\n  if (this.totalBytes > expected) {\n    // Use this byte count to calculate how many seconds ahead we are.\n    var remainder = this.totalBytes - expected;\n    var sleepTime = remainder / this.bps * 1000; //console.error('sleep time: %d', sleepTime);\n\n    if (sleepTime > 0) {\n      setTimeout(d, sleepTime);\n    } else {\n      d();\n    }\n  } else {\n    d();\n  }\n};","map":{"version":3,"names":["assert","require","Parser","inherits","Transform","module","exports","Throttle","opts","bps","lowWaterMark","highWaterMark","Error","chunkSize","call","Math","max","totalBytes","startTime","Date","now","_passthroughChunk","prototype","_passthrough","_onchunk","output","done","self","totalSeconds","expected","d","remainder","sleepTime","setTimeout"],"sources":["C:/Users/zlf/Desktop/Code_snippet/Css/xuniliebiao/node_modules/throttle/throttle.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar Parser = require('stream-parser');\nvar inherits = require('util').inherits;\nvar Transform = require('stream').Transform;\n\n// node v0.8.x compat\nif (!Transform) Transform = require('readable-stream/transform');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Throttle;\n\n/**\n * The `Throttle` passthrough stream class is very similar to the node core\n * `stream.Passthrough` stream, except that you specify a `bps` \"bytes per\n * second\" option and data *will not* be passed through faster than the byte\n * value you specify.\n *\n * You can invoke with just a `bps` Number and get the rest of the default\n * options. This should be more common:\n *\n * ``` js\n * process.stdin.pipe(new Throttle(100 * 1024)).pipe(process.stdout);\n * ```\n *\n * Or you can pass an `options` Object in, with a `bps` value specified along with\n * other options:\n *\n * ``` js\n * var t = new Throttle({ bps: 100 * 1024, chunkSize: 100, highWaterMark: 500 });\n * ```\n *\n * @param {Number|Object} opts an options object or the \"bps\" Number value\n * @api public\n */\n\nfunction Throttle (opts) {\n  if (!(this instanceof Throttle)) return new Throttle(opts);\n\n  if ('number' == typeof opts) opts = { bps: opts };\n  if (!opts) opts = {};\n  if (null == opts.lowWaterMark) opts.lowWaterMark = 0;\n  if (null == opts.highWaterMark) opts.highWaterMark = 0;\n  if (null == opts.bps) throw new Error('must pass a \"bps\" bytes-per-second option');\n  if (null == opts.chunkSize) opts.chunkSize = opts.bps / 10 | 0; // 1/10th of \"bps\" by default\n\n  Transform.call(this, opts);\n\n  this.bps = opts.bps;\n  this.chunkSize = Math.max(1, opts.chunkSize);\n\n  this.totalBytes = 0;\n  this.startTime = Date.now();\n\n  this._passthroughChunk();\n}\ninherits(Throttle, Transform);\n\n/**\n * Mixin `Parser`.\n */\n\nParser(Throttle.prototype);\n\n/**\n * Begins passing through the next \"chunk\" of bytes.\n *\n * @api private\n */\n\nThrottle.prototype._passthroughChunk = function () {\n  this._passthrough(this.chunkSize, this._onchunk);\n  this.totalBytes += this.chunkSize;\n};\n\n/**\n * Called once a \"chunk\" of bytes has been passed through. Waits if necessary\n * before passing through the next chunk of bytes.\n *\n * @api private\n */\n\nThrottle.prototype._onchunk = function (output, done) {\n  var self = this;\n  var totalSeconds = (Date.now() - this.startTime) / 1000;\n  var expected = totalSeconds * this.bps;\n\n  function d () {\n    self._passthroughChunk();\n    done();\n  }\n\n  if (this.totalBytes > expected) {\n    // Use this byte count to calculate how many seconds ahead we are.\n    var remainder = this.totalBytes - expected;\n    var sleepTime = remainder / this.bps * 1000;\n    //console.error('sleep time: %d', sleepTime);\n    if (sleepTime > 0) {\n      setTimeout(d, sleepTime);\n    } else {\n      d();\n    }\n  } else {\n    d();\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}