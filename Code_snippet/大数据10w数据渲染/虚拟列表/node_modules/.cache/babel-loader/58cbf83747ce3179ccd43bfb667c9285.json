{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"v-scroll\",\n    onScrollPassive: _cache[0] || (_cache[0] = (...args) => $options.doScroll && $options.doScroll(...args)),\n    ref: \"scrollBox\"\n  }, [_createElementVNode(\"div\", {\n    style: _normalizeStyle([$options.blankStyle, {\n      \"height\": \"100vh\"\n    }])\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.tempSanxins, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id,\n      class: \"scroll-item\"\n    }, [_createElementVNode(\"span\", null, _toDisplayString(item.msg), 1\n    /* TEXT */\n    ), _createElementVNode(\"img\", {\n      src: item.src\n    }, null, 8\n    /* PROPS */\n    , _hoisted_1)]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 4\n  /* STYLE */\n  )], 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  );\n}","map":{"version":3,"mappings":";;;;;;uBACEA,oBAOM,KAPN,EAOM;IAPDC,KAAK,EAAC,UAOL;4DAPiCC,gDAOjC;IAP2CC,GAAG,EAAC;EAO/C,CAPN,GACEC,oBAKM,KALN,EAKM;IALAC,KAAK,mBAAEH,mBAAF,EAAc;MAAA;IAAA,CAAd;EAKL,CALN,sBACEF,oBAGMM,SAHN,EAGM,IAHN,EAGMC,YAHcL,oBAGd,EAHMM,IAAmB,IAAf;yBAAhBR,oBAGM,KAHN,EAGM;MAH4BS,GAAG,EAAED,IAAI,CAACE,EAGtC;MAH0CT,KAAK,EAAC;IAGhD,CAHN,GACEG,oBAA2B,MAA3B,EAA2B,IAA3B,EAA2BO,iBAAlBH,IAAI,CAACI,GAAa,CAA3B,EAAiB;IAAA;IAAjB,GACAR,oBAAuB,KAAvB,EAAuB;MAAjBS,GAAG,EAAEL,IAAI,CAACK;IAAO,CAAvB;;IAAA,cAFF;GAGM,CAHN;;EAAA,GADF;;EAAA,EADF;;EAAA","names":["_createElementBlock","class","$options","ref","_createElementVNode","style","_Fragment","_renderList","item","key","id","_toDisplayString","msg","src"],"sourceRoot":"","sources":["C:\\Users\\zlf\\Desktop\\Code_snippet\\Css\\xuniliebiao\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"v-scroll\" @scroll.passive=\"doScroll\" ref=\"scrollBox\">\n    <div :style=\"blankStyle\" style=\"height: 100vh\">\n      <div v-for=\"item in tempSanxins\" :key=\"item.id\" class=\"scroll-item\">\n        <span>{{ item.msg }}</span>\n        <img :src=\"item.src\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport { throttle } from 'throttle-debounce';\n\nexport default {\n  data() {\n    return {\n      allSanxins: [], // 所有数据\n      itemHiehgt: 150, // 列表每一项的宽度\n      boxHeight: 0, // 可视区域的高度\n      startIndex: 0, // 元素开始索引\n    };\n  },\n  created() {\n    // 模拟请求数据\n    this.getAllSanxin(30);\n  },\n  mounted() {\n    // 在mounted时获取可视区域的高度\n    this.getScrollBoxHeight();\n    // 监听屏幕变化以及旋转，都要重新获取可视区域的高度\n    window.onresize = this.getScrollBoxHeight;\n    window.onorientationchange = this.getScrollBoxHeight;\n  },\n  methods: {\n    getAllSanxin(count) {\n      // 模拟获取数据\n      const length = this.allSanxins.length;\n      for (let i = 0; i < count; i++) {\n        this.allSanxins.push({\n          id: `sanxin${length + i}`,\n          msg: `我是三心${length + i}号`,\n          // 这里随便选一张图片就行\n          src: \"https://img0.baidu.com/it/u=3798217922,3880088897&fm=253&fmt=auto&app=120&f=JPEG?w=889&h=500\",\n        });\n      }\n    },\n    // 使用节流，提高性能\n    doScroll: throttle(1000,function () {//主要是为了计算出startIndex\n      // 监听可视区域的滚动事件\n      // 公式：~~(滚动的距离 / 列表项 )，就能算出已经滚过了多少个列表项，也就能知道现在的startIndex是多少\n      // 例如我滚动条滚过了160px，那么index就是1，因为此时第一个列表项已经被滚上去了，可视区域里的第一项的索引是1\n      const index = ~~(this.$refs.scrollBox.scrollTop / this.itemHiehgt);\n      if (index === this.startIndex) return;\n      this.startIndex = index;\n      if (this.startIndex + this.itemNum > this.allSanxins.length - 1) {\n        this.getAllSanxin(30);\n      }\n    }),\n    getScrollBoxHeight() {\n      // 获取可视区域的高度\n      this.boxHeight = this.$refs.scrollBox.clientHeight;\n    },\n  },\n  computed: {\n    itemNum() {// 可视区域可展示多少个列表项\n      // 可视区域可展示多少个列表项？ 计算公式：~~(可视化区域高度 / 列表项高度) + 2\n      // ~~是向下取整的运算符，等同于Math.floor()，为什么要 +2 ，是因为可能最上面和最下面的元素都只展示一部分\n      return ~~(this.boxHeight / this.itemHiehgt) + 2;\n    },\n    endIndex() {// endIndex的计算公式：(开始索引 + 可视区域可展示多少个列表项 * 2)\n      // endIndex的计算公式：(开始索引 + 可视区域可展示多少个列表项 * 2)\n      // 比如可视区域可展示8个列表项，startIndex是0的话endIndex就是0 + 8 * 2 = 16，startIndex是1的话endIndex就是1 + 8 * 2 = 17，以此类推\n      // 为什么要乘2呢，因为这样的话可以预加载出一页的数据，防止滚动过快，出现暂时白屏现象\n      let index = this.startIndex + this.itemNum * 2;\n      if (!this.allSanxins[index]) {\n        // 到底的情况，比如startIndex是99995，那么endIndex本应该是99995 + 8 * 2 = 10011\n        // 但是列表数据总数只有10000条，此时就需要让endIndex = (列表数据长度 - 1)\n        index = this.allSanxins.length - 1;\n      }\n      return index;\n    },\n    tempSanxins() {\n      //   可视区域展示的截取数据，使用了数组的slice方法，不改变原数组又能截取\n      let startIndex = 0;\n      if (this.startIndex <= this.itemNum) {\n        startIndex = 0;\n      } else {\n        startIndex = this.startIndex - this.itemNum;\n      }\n      return this.allSanxins.slice(startIndex, this.endIndex + 1);\n    },\n    blankStyle() {\n      // 上下方的空白处使用padding来充当\n      let startIndex = 0;\n      if (this.startIndex <= this.itemNum) {\n        startIndex = 0;\n      } else {\n        startIndex = this.startIndex - this.itemNum;\n      }\n      return {\n        // 上方空白的高度计算公式：(开始index * 列表项高度)\n        // 比如你滚过了3个列表项，那么上方空白区高度就是3 * 150 = 450，这样才能假装10000个数据的滚动状态\n        paddingTop: startIndex * this.itemHiehgt + \"px\",\n        // 下方空白的高度计算公式：(总数据的个数 - 结束index - 1) * 列表项高度\n        // 例如现在结束index是100，那么下方空白高度就是：(10000 - 100 - 1) * 150 = 1,484,850\n        paddingBottom:\n          (this.allSanxins.length - this.endIndex - 1) * this.itemHiehgt + \"px\",\n        // 不要忘了加px哦\n      };\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.v-scroll {\n  height: 100vh;\n  /* padding-bottom: 500px; */\n  overflow: auto;\n\n  .scroll-item {\n    height: 148px;\n    /* width: 100%; */\n    border: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 20px;\n\n    img {\n      height: 100%;\n    }\n  }\n}\n</style>\n\n"]},"metadata":{},"sourceType":"module"}